'use client'

import React from 'react'

interface TrowelRatingProps {
  rating: number
  maxRating?: number
  size?: 'sm' | 'md' | 'lg'
  interactive?: boolean
  onRatingClick?: (rating: number) => void
}

const TrowelRating: React.FC<TrowelRatingProps> = ({
  rating,
  maxRating = 5,
  size = 'md',
  interactive = false,
  onRatingClick
}) => {
  // Size configurations
  const sizeConfig = {
    sm: { width: 16, height: 16, gap: 'gap-1' },
    md: { width: 22, height: 22, gap: 'gap-1.5' },
    lg: { width: 28, height: 28, gap: 'gap-2' }
  }

  const { width, height, gap } = sizeConfig[size]

  // Create array of ratings to render
  const trowels = Array.from({ length: maxRating }, (_, index) => {
    const trowelNumber = index + 1
    const fillPercentage = Math.max(0, Math.min(100, (rating - index) * 100))

    return {
      index: trowelNumber,
      fillPercentage,
      isFilled: fillPercentage > 0
    }
  })

  const handleTrowelClick = (trowelIndex: number) => {
    if (interactive && onRatingClick) {
      onRatingClick(trowelIndex)
    }
  }

  return (
    <div className={`flex items-center ${gap}`}>
      {trowels.map(({ index, fillPercentage, isFilled }) => (
        <div
          key={index}
          className={`relative ${interactive ? 'cursor-pointer hover:scale-110 transition-transform' : ''}`}
          onClick={() => handleTrowelClick(index)}
        >
          {/* Background (empty) trowel */}
          <svg
            width={width}
            height={height}
            viewBox="0 0 22 22"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            className="absolute inset-0"
          >
            <path
              d="M20.4088 0.766251C20.2289 0.763632 20.0221 0.796365 19.7884 0.87261C19.7497 0.890504 16.5876 2.35047 13.4047 3.9419C11.8036 4.74246 10.2028 5.574 9.01233 6.26082C8.41703 6.60421 7.92329 6.91286 7.59347 7.1539C7.4285 7.27436 7.30429 7.37967 7.23717 7.44937C7.21578 7.47163 7.21552 7.47975 7.21011 7.49201C7.24873 8.2838 7.90522 9.45729 8.60561 10.3911C8.77921 10.6221 8.95876 10.8486 9.14409 11.0702L9.83925 10.3751L9.88656 10.3486C9.88656 10.3486 10.2261 10.1566 10.6337 10.0148C10.8376 9.94379 11.0603 9.88181 11.2946 9.86785C11.5288 9.85388 11.8104 9.88762 12.0252 10.1018C12.2395 10.3156 12.2738 10.5966 12.2604 10.8302C12.2472 11.0639 12.186 11.286 12.1158 11.4893C11.9755 11.8961 11.785 12.2349 11.785 12.2349L11.7584 12.2827L11.0575 12.9836C11.2792 13.1689 11.5056 13.3484 11.7366 13.522C12.6704 14.2224 13.8439 14.8789 14.6357 14.9175C14.6479 14.9121 14.656 14.9119 14.6783 14.8905C14.748 14.8234 14.8533 14.6991 14.9738 14.5342C15.2148 14.2044 15.5235 13.7106 15.8669 13.1153C16.5537 11.9249 17.3853 10.3241 18.1858 8.72294C19.7772 5.54009 21.2372 2.37793 21.2551 2.33926C21.4613 1.70703 21.3433 1.27374 21.0986 1.02907C20.9443 0.874705 20.7153 0.770484 20.4087 0.76612L20.4088 0.766251ZM11.3808 10.6509C11.369 10.6508 11.3558 10.6511 11.3412 10.652C11.2249 10.659 11.0554 10.6999 10.892 10.7567C10.6021 10.8576 10.369 10.9819 10.313 11.0123L8.66161 12.6637L9.464 13.4661L11.1204 11.8096C11.2194 11.6242 11.3039 11.4315 11.3731 11.2331C11.4294 11.0703 11.4696 10.9012 11.4761 10.7855C11.4806 10.7078 11.4703 10.6726 11.4673 10.6609C11.4576 10.6583 11.4329 10.6512 11.3807 10.6509L11.3808 10.6509ZM11.4673 10.6609C11.473 10.6624 11.4751 10.6627 11.4704 10.6581C11.4656 10.6533 11.4658 10.6551 11.4673 10.6609ZM8.10624 13.2191L7.67417 13.6513L8.47643 14.4535L8.9085 14.0215L8.10624 13.2192V13.2191ZM6.57156 13.6596L1.98006 17.8325L4.29523 20.1477L8.46814 15.5562L6.57156 13.6596ZM1.39807 18.3615L0.976254 18.7448C0.923314 18.7982 0.901186 18.8474 0.894858 18.9429C0.888399 19.0394 0.911094 19.18 0.973679 19.3428C1.09894 19.6684 1.37856 20.0702 1.71802 20.4097C2.05748 20.7491 2.45931 21.0288 2.78489 21.154C2.94768 21.2166 3.08822 21.2393 3.18476 21.2328C3.28034 21.2265 3.32952 21.2044 3.3829 21.1515L3.76622 20.7297L1.39803 18.3614L1.39807 18.3615Z"
              fill="#786556"
              className="opacity-30"
            />
          </svg>

          {/* Filled portion */}
          {isFilled && (
            <div
              className="relative overflow-hidden"
              style={{
                width: `${width}px`,
                height: `${height}px`,
                clipPath: `inset(0 ${100 - fillPercentage}% 0 0)`
              }}
            >
              <svg
                width={width}
                height={height}
                viewBox="0 0 22 22"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                className="absolute inset-0"
              >
                <path
                  d="M20.4088 0.766251C20.2289 0.763632 20.0221 0.796365 19.7884 0.87261C19.7497 0.890504 16.5876 2.35047 13.4047 3.9419C11.8036 4.74246 10.2028 5.574 9.01233 6.26082C8.41703 6.60421 7.92329 6.91286 7.59347 7.1539C7.4285 7.27436 7.30429 7.37967 7.23717 7.44937C7.21578 7.47163 7.21552 7.47975 7.21011 7.49201C7.24873 8.2838 7.90522 9.45729 8.60561 10.3911C8.77921 10.6221 8.95876 10.8486 9.14409 11.0702L9.83925 10.3751L9.88656 10.3486C9.88656 10.3486 10.2261 10.1566 10.6337 10.0148C10.8376 9.94379 11.0603 9.88181 11.2946 9.86785C11.5288 9.85388 11.8104 9.88762 12.0252 10.1018C12.2395 10.3156 12.2738 10.5966 12.2604 10.8302C12.2472 11.0639 12.186 11.286 12.1158 11.4893C11.9755 11.8961 11.785 12.2349 11.785 12.2349L11.7584 12.2827L11.0575 12.9836C11.2792 13.1689 11.5056 13.3484 11.7366 13.522C12.6704 14.2224 13.8439 14.8789 14.6357 14.9175C14.6479 14.9121 14.656 14.9119 14.6783 14.8905C14.748 14.8234 14.8533 14.6991 14.9738 14.5342C15.2148 14.2044 15.5235 13.7106 15.8669 13.1153C16.5537 11.9249 17.3853 10.3241 18.1858 8.72294C19.7772 5.54009 21.2372 2.37793 21.2551 2.33926C21.4613 1.70703 21.3433 1.27374 21.0986 1.02907C20.9443 0.874705 20.7153 0.770484 20.4087 0.76612L20.4088 0.766251ZM11.3808 10.6509C11.369 10.6508 11.3558 10.6511 11.3412 10.652C11.2249 10.659 11.0554 10.6999 10.892 10.7567C10.6021 10.8576 10.369 10.9819 10.313 11.0123L8.66161 12.6637L9.464 13.4661L11.1204 11.8096C11.2194 11.6242 11.3039 11.4315 11.3731 11.2331C11.4294 11.0703 11.4696 10.9012 11.4761 10.7855C11.4806 10.7078 11.4703 10.6726 11.4673 10.6609C11.4576 10.6583 11.4329 10.6512 11.3807 10.6509L11.3808 10.6509ZM11.4673 10.6609C11.473 10.6624 11.4751 10.6627 11.4704 10.6581C11.4656 10.6533 11.4658 10.6551 11.4673 10.6609ZM8.10624 13.2191L7.67417 13.6513L8.47643 14.4535L8.9085 14.0215L8.10624 13.2192V13.2191ZM6.57156 13.6596L1.98006 17.8325L4.29523 20.1477L8.46814 15.5562L6.57156 13.6596ZM1.39807 18.3615L0.976254 18.7448C0.923314 18.7982 0.901186 18.8474 0.894858 18.9429C0.888399 19.0394 0.911094 19.18 0.973679 19.3428C1.09894 19.6684 1.37856 20.0702 1.71802 20.4097C2.05748 20.7491 2.45931 21.0288 2.78489 21.154C2.94768 21.2166 3.08822 21.2393 3.18476 21.2328C3.28034 21.2265 3.32952 21.2044 3.3829 21.1515L3.76622 20.7297L1.39803 18.3614L1.39807 18.3615Z"
                  fill="#EAB308"
                />
              </svg>
            </div>
          )}
        </div>
      ))}

      {/* Rating text */}
      <span className="ml-2 text-sm text-gray-400">
        {rating.toFixed(1)} / {maxRating}
      </span>
    </div>
  )
}

export default TrowelRating
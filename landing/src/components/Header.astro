---
import { navConfig } from "../config/nav.config";

import type { NavItem } from "../config/nav.config";

const { items } = navConfig;
const currentPath = Astro.url.pathname;
---

<header class="fixed inset-0 bottom-auto z-50 max-w-full px-6 py-4">
  <nav class="z-20 flex items-center justify-between w-full mx-auto max-w-7xl">
    <!-- Logo -->
    <div class="flex items-center">
      <a href="#home" class="flex items-center">
        <img src="/yore-logo.png" alt="Yore" class="w-auto h-8" />
      </a>
    </div>

    <!-- Navigation Links -->
    <div class="items-center hidden space-x-8 md:flex">
      <ul
        class="flex justify-between w-full gap-6 md:space-x-6 md:justify-center md:gap-12 fouc"
      >
        {
          items.map((item: NavItem) => {
            const isInternalActive =
              item.type === "internal" && item.href === currentPath;

            const basePath = Astro.url.pathname === "/" ? "" : "/";
            const fullHref =
              item.type === "section" ? `${basePath}${item.href}` : item.href;

            item.href === "#home" && null; // Ignore Home link in the header

            return (
              <li class="flex-1 md:flex-none">
                <a
                  href={fullHref}
                  class={`flex flex-col items-center gap-1 text-[var(--white-icon)] transition-colors text-xs md:text-base relative group ${isInternalActive ? "active" : ""}`}
                >
                  {/* <div class="absolute -left-4 top-1/2 w-2 h-2 rounded-full transition-all duration-300 bg-[#A9FF5B] nav-indicator hidden md:block" />
                  <span class="flex items-center justify-center w-6 h-6 md:hidden">
                    <fragment set:html={item.icon} />
                  </span> */}
                  <span class="hidden md:inline-block">{item.label}</span>
                </a>
              </li>
            );
          })
        }
      </ul>
    </div>

    <!-- Mobile menu button -->
    <button id="mobile-menu-button" class="z-30 text-white md:hidden">
      <svg
        id="hamburger-icon"
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width={2}
          d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
      <svg
        id="close-icon"
        class="hidden w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width={2}
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </nav>

  <!-- Mobile menu -->
  <div
    id="mobile-menu"
    class="fixed inset-0 z-0 transition-transform duration-300 ease-in-out transform translate-x-full bg-gray-800 md:hidden"
  >
    <div
      class="flex flex-col items-center justify-center w-screen h-screen px-6 space-y-8 bg-gray-500"
    >
      <a href="#top" class="flex items-center">
        <img src="/yore-logo.png" alt="Yore" class="w-auto h-16" />
      </a>
      <ul
        class="flex justify-between w-full gap-6 md:space-x-6 md:justify-center md:gap-12 fouc"
      >
        {
          items.map((item: NavItem) => {
            const isInternalActive =
              item.type === "internal" && item.href === currentPath;

            // Smart href builder:
            const basePath = Astro.url.pathname === "/" ? "" : "/";
            const fullHref =
              item.type === "section" ? `${basePath}${item.href}` : item.href;

            item.href === "#home" && null; // Ignore Home link in the header
            return (
              <li class="flex-1 md:flex-none">
                <a
                  href={fullHref}
                  class={`flex flex-col items-center gap-1 text-[var(--white-icon)] transition-colors text-xs md:text-base relative group ${isInternalActive ? "active" : ""}`}
                >
                  {/* <div class="absolute -left-4 top-1/2 w-2 h-2 rounded-full transition-all duration-300 bg-[#A9FF5B] nav-indicator hidden md:block" />
                  <span class="flex items-center justify-center w-6 h-6 md:hidden">
                    <fragment set:html={item.icon} />
                  </span> */}
                  <span class="hidden md:inline-block">{item.label}</span>
                </a>
              </li>
            );
          })
        }
      </ul>
    </div>
  </div>
</header>

<script>
  import { gsap } from "gsap";
  import { ScrollToPlugin } from "gsap/ScrollToPlugin";

  // Register the ScrollToPlugin
  gsap.registerPlugin(ScrollToPlugin);

  const mobileMenuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");
  const hamburgerIcon = document.getElementById("hamburger-icon");
  const closeIcon = document.getElementById("close-icon");

  let isMenuOpen = false;

  function toggleMenu() {
    isMenuOpen = !isMenuOpen;

    if (isMenuOpen) {
      // Show menu
      mobileMenu?.classList.remove("translate-x-full");
      mobileMenu?.classList.add("translate-x-0");
      hamburgerIcon?.classList.add("hidden");
      closeIcon?.classList.remove("hidden");
      // Prevent body scroll when menu is open
      document.body.style.overflow = "hidden";
    } else {
      // Hide menu
      mobileMenu?.classList.remove("translate-x-0");
      mobileMenu?.classList.add("translate-x-full");
      hamburgerIcon?.classList.remove("hidden");
      closeIcon?.classList.add("hidden");
      // Restore body scroll
      document.body.style.overflow = "";
    }
  }

  // Smooth scroll function
  function smoothScrollTo(targetId: string) {
    const target = document.querySelector(targetId);
    if (target) {
      gsap.to(window, {
        duration: 1.5,
        scrollTo: {
          y: target,
          offsetY: 0, // Account for fixed header
        },
        ease: "power2.out",
      });
    }
  }

  mobileMenuButton?.addEventListener("click", toggleMenu);

  // Add smooth scroll to all navigation links
  const allNavLinks = document.querySelectorAll('a[href^="#"]');
  allNavLinks.forEach((link) => {
    link.addEventListener("click", (e) => {
      e.preventDefault();
      const targetId = link.getAttribute("href");

      // Close mobile menu if open
      if (isMenuOpen) {
        toggleMenu();
      }

      // Smooth scroll to target
      if (targetId) {
        smoothScrollTo(targetId);
      }
    });
  });

  // Close menu when clicking outside (on the backdrop)
  mobileMenu?.addEventListener("click", (e) => {
    if (e.target === mobileMenu && isMenuOpen) {
      toggleMenu();
    }
  });
</script>
